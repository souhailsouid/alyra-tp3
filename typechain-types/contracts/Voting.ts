/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Voting {
  export type ProposalStruct = { description: string; voteCount: BigNumberish };

  export type ProposalStructOutput = [
    description: string,
    voteCount: bigint
  ] & { description: string; voteCount: bigint };

  export type VoterStruct = {
    isRegistered: boolean;
    hasVoted: boolean;
    votedProposalId: BigNumberish;
  };

  export type VoterStructOutput = [
    isRegistered: boolean,
    hasVoted: boolean,
    votedProposalId: bigint
  ] & { isRegistered: boolean; hasVoted: boolean; votedProposalId: bigint };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProposal"
      | "addVoter"
      | "endProposalsRegistering"
      | "endVotingSession"
      | "getOneProposal"
      | "getVoter"
      | "owner"
      | "renounceOwnership"
      | "setVote"
      | "startProposalsRegistering"
      | "startVotingSession"
      | "tallyVotes"
      | "transferOwnership"
      | "winningProposalID"
      | "workflowStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProposalRegistered"
      | "Voted"
      | "VoterRegistered"
      | "WorkflowStatusChange"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addProposal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endProposalsRegistering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOneProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startProposalsRegistering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winningProposalID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workflowStatus",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endProposalsRegistering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startProposalsRegistering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningProposalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workflowStatus",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRegisteredEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [voter: string, proposalId: bigint];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voterAddress: AddressLike];
  export type OutputTuple = [voterAddress: string];
  export interface OutputObject {
    voterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowStatusChangeEvent {
  export type InputTuple = [
    previousStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [previousStatus: bigint, newStatus: bigint];
  export interface OutputObject {
    previousStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProposal: TypedContractMethod<[_desc: string], [void], "nonpayable">;

  addVoter: TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;

  endProposalsRegistering: TypedContractMethod<[], [void], "nonpayable">;

  endVotingSession: TypedContractMethod<[], [void], "nonpayable">;

  getOneProposal: TypedContractMethod<
    [_id: BigNumberish],
    [Voting.ProposalStructOutput],
    "view"
  >;

  getVoter: TypedContractMethod<
    [_addr: AddressLike],
    [Voting.VoterStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVote: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  startProposalsRegistering: TypedContractMethod<[], [void], "nonpayable">;

  startVotingSession: TypedContractMethod<[], [void], "nonpayable">;

  tallyVotes: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  winningProposalID: TypedContractMethod<[], [bigint], "view">;

  workflowStatus: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProposal"
  ): TypedContractMethod<[_desc: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endProposalsRegistering"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endVotingSession"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOneProposal"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Voting.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoter"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [Voting.VoterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVote"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startProposalsRegistering"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVotingSession"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tallyVotes"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "winningProposalID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "workflowStatus"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRegistered"
  ): TypedContractEvent<
    ProposalRegisteredEvent.InputTuple,
    ProposalRegisteredEvent.OutputTuple,
    ProposalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowStatusChange"
  ): TypedContractEvent<
    WorkflowStatusChangeEvent.InputTuple,
    WorkflowStatusChangeEvent.OutputTuple,
    WorkflowStatusChangeEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalRegistered(uint256)": TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;
    ProposalRegistered: TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "WorkflowStatusChange(uint8,uint8)": TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
    WorkflowStatusChange: TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
  };
}
