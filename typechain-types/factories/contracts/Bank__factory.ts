/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Bank, BankInterface } from "../../contracts/Bank";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b91906101bb565b60405180910390fd5b610093816100b360201b60201c565b506100ae67800817dbc7c877c060c01b61017760201b60201c565b6101d6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101a58261017a565b9050919050565b6101b58161019a565b82525050565b60006020820190506101d060008301846101ac565b92915050565b6109ea806101e56000396000f3fe60806040526004361061004a5760003560e01c80632e1a7d4d1461004f578063715018a6146100785780638da5cb5b1461008f578063d0e30db0146100ba578063f2fde38b146100c4575b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061070d565b6100ed565b005b34801561008457600080fd5b5061008d610362565b005b34801561009b57600080fd5b506100a4610376565b6040516100b1919061077b565b60405180910390f35b6100c261039f565b005b3480156100d057600080fd5b506100eb60048036038101906100e691906107c2565b6104f6565b005b61010167dee8a29b7c4d2e1660c01b61057c565b61010961057f565b61011d67d3781d96e867930760c01b61057c565b610131673259cdcba0a39aa560c01b61057c565b6101456766ab83c34fc2df8160c01b61057c565b61015967eda3f53ac7f4a9d160c01b61057c565b61016d67050d3e77375033f460c01b61057c565b478111156101b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a79061084c565b60405180910390fd5b6101c467c05c62aa4f3b30dc60c01b61057c565b6101d8678ce966fa2d7015aa60c01b61057c565b6101ec67b07360d24fcec85e60c01b61057c565b60003373ffffffffffffffffffffffffffffffffffffffff16826040516102129061089d565b60006040518083038185875af1925050503d806000811461024f576040519150601f19603f3d011682016040523d82523d6000602084013e610254565b606091505b5050905061026c6761cd66340dbf56d660c01b61057c565b6102806795c643eab42c4ed460c01b61057c565b61029467786503297e6d8fb460c01b61057c565b806102d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cb906108fe565b60405180910390fd5b6102e867c4056e78ed4231e960c01b61057c565b6102fc671be7f689747ca73f60c01b61057c565b610310679095678d77e7366060c01b61057c565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051610356919061092d565b60405180910390a25050565b61036a61057f565b6103746000610606565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103b3676eca42c9ba630db160c01b61057c565b6103bb61057f565b6103cf6729e40c1129245fdb60c01b61057c565b6103e36702bd955a955186d260c01b61057c565b6103f767495199dda94c1dbb60c01b61057c565b61040b67a09b3143ec1ce30b60c01b61057c565b61041f67afd85f784a08a41f60c01b61057c565b67016345785d8a000034101561046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046190610994565b60405180910390fd5b61047e679d9da7e539ef4e4060c01b61057c565b610492674d84bd04afeecc8b60c01b61057c565b6104a6677adc06e2db07874c60c01b61057c565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516104ec919061092d565b60405180910390a2565b6104fe61057f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105705760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610567919061077b565b60405180910390fd5b61057981610606565b50565b50565b6105876106ca565b73ffffffffffffffffffffffffffffffffffffffff166105a5610376565b73ffffffffffffffffffffffffffffffffffffffff1614610604576105c86106ca565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016105fb919061077b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6106ea816106d7565b81146106f557600080fd5b50565b600081359050610707816106e1565b92915050565b600060208284031215610723576107226106d2565b5b6000610731848285016106f8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107658261073a565b9050919050565b6107758161075a565b82525050565b6000602082019050610790600083018461076c565b92915050565b61079f8161075a565b81146107aa57600080fd5b50565b6000813590506107bc81610796565b92915050565b6000602082840312156107d8576107d76106d2565b5b60006107e6848285016107ad565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820457468657220696e207468652062616e6b00000000600082015250565b6000610836601c836107ef565b915061084182610800565b602082019050919050565b6000602082019050818103600083015261086581610829565b9050919050565b600081905092915050565b50565b600061088760008361086c565b915061089282610877565b600082019050919050565b60006108a88261087a565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006108e86014836107ef565b91506108f3826108b2565b602082019050919050565b60006020820190508181036000830152610917816108db565b9050919050565b610927816106d7565b82525050565b6000602082019050610942600083018461091e565b92915050565b7f596f75206e65656420746f2073656e6420736f6d652045746865720000000000600082015250565b600061097e601b836107ef565b915061098982610948565b602082019050919050565b600060208201905081810360008301526109ad81610971565b905091905056fea26469706673582212208900333b89537912d2aecfd29f9621adb9a294b54a07c56768149444e129678964736f6c63430008140033";

type BankConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BankConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bank__factory extends ContractFactory {
  constructor(...args: BankConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Bank & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Bank__factory {
    return super.connect(runner) as Bank__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BankInterface {
    return new Interface(_abi) as BankInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bank {
    return new Contract(address, _abi, runner) as unknown as Bank;
  }
}
